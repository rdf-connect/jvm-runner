plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

group = 'com.example'
version = '1.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation project(":types")
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.grpc:grpc-netty:1.63.0' // or latest version
    implementation 'io.grpc:grpc-protobuf:1.63.0'
    implementation 'io.grpc:grpc-stub:1.63.0'
    implementation 'io.grpc:grpc-core:1.63.0'
    implementation 'com.google.protobuf:protobuf-java:4.28.2'

    // For logging, optional
    implementation 'org.slf4j:slf4j-simple:2.0.12'

    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is used by the application.
    implementation libs.guava
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.32.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}

jar {
    dependsOn(':types:jar')
    manifest {
        attributes 'Main-Class': 'org.example.App'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


shadowJar {
    dependsOn(':types:jar')
    archiveBaseName.set('app')
    archiveClassifier.set('fat') // Removes `-all` from default
    archiveVersion.set(version)

    mergeServiceFiles()  // <- crucial!
    // Optional: set main class for executable JAR
    manifest {
        attributes 'Main-Class': 'org.example.Main'
    }
}

sourceSets {
    main {
        proto {
            srcDirs = ['../proto/proto'] // relative to project root
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.register('copyJarToRoot', Copy) {
    dependsOn jar
    from(jar.archiveFile) // this is a Provider<RegularFile>
    into("$rootDir/output")  // safer than rootDir itself
}

tasks.register('copyFatJarToRoot', Copy) {
    dependsOn shadowJar
    from(shadowJar.archiveFile)
    into("$rootDir/output")
}
build.finalizedBy('copyJarToRoot', 'copyFatJarToRoot')

